var lbp = lbp || {};


(function ($) {

    lbp.appPath = lbp.appPath || '/';
    lbp.pageLoadTime = new Date();

    lbp.request = {
        create: function (url, dataBodyRequest) {
            return window.axios.post(url, dataBodyRequest)
                .then(function (response) {
                    return response.data;
                })
                .catch(function (error) {
                    return error;
                });
        },
        get: function (url, params) {
            return window.axios.get(url, params)
                .then(function (response) {
                    return response.data;
                })
                .catch(function (error) {
                    return error;
                });
        }
    };

    /* LOCALIZATION ***********************************************/
    //Implements Localization API that simplifies usage of localization scripts generated by Abp.

    lbp.localization = lbp.localization || {};

    lbp.localization.currentLanguageCode = {};
    lbp.localization.currentLanguageName = {};

    lbp.localization.sources = [];

    lbp.request.get('/lang/resource').then(function (response) {
        lbp.localization.currentLanguageCode = response.locale.code;
        lbp.localization.currentLanguageName = response.locale.name;
        lbp.localization.sources = response;
    }).catch(function (error) {
        lbp.localization.sources = error;
    });

    lbp.localization.localize = function (key, sourceName) {
        var source = lbp.localization.sources;

        var sourceFinded = _.get(_.get(_.find(source.locale.resources, _.property(sourceName)), sourceName), key);

        if (!sourceFinded || sourceFinded === undefined) {
            lbp.log.warn('Could not find localization source: ' + sourceName + " and key " + key);
        }
        return sourceFinded;
    };


    lbp.log = lbp.log || {};

    lbp.log.levels = {
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        FATAL: 5
    };

    lbp.log.level = lbp.log.levels.DEBUG;

    lbp.log.log = function (logObject, logLevel) {
        if (!window.console || !window.console.log) {
            return;
        }

        if (logLevel !== undefined && logLevel < lbp.log.level) {
            return;
        }

        console.log(logObject);
    };
    lbp.log.debug = function (logObject) {
        lbp.log.log("DEBUG: ", lbp.log.levels.DEBUG);
        lbp.log.log(logObject, lbp.log.levels.DEBUG);
    };

    lbp.log.info = function (logObject) {
        lbp.log.log("INFO: ", lbp.log.levels.INFO);
        lbp.log.log(logObject, lbp.log.levels.INFO);
    };

    lbp.log.warn = function (logObject) {
        lbp.log.log("WARN: ", lbp.log.levels.WARN);
        lbp.log.log(logObject, lbp.log.levels.WARN);
    };

    lbp.log.error = function (logObject) {
        lbp.log.log("ERROR: ", lbp.log.levels.ERROR);
        lbp.log.log(logObject, lbp.log.levels.ERROR);
    };

    lbp.log.fatal = function (logObject) {
        lbp.log.log("FATAL: ", lbp.log.levels.FATAL);
        lbp.log.log(logObject, lbp.log.levels.FATAL);
    };
    /* NOTIFICATION *********************************************/
    //Defines Notification API, not implements it

    lbp.notify = lbp.notify || {};

    lbp.notify.success = function (message, title, options) {
        lbp.log.warn('abp.notify.success is not implemented!');
    };

    lbp.notify.info = function (message, title, options) {
        lbp.log.warn('abp.notify.info is not implemented!');
    };

    lbp.notify.warn = function (message, title, options) {
        lbp.log.warn('abp.notify.warn is not implemented!');
    };

    lbp.notify.error = function (message, title, options) {
        lbp.log.warn('abp.notify.error is not implemented!');
    };
})(jQuery);
